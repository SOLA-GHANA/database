#!/bin/bash
clear
echo ""
echo "****************************************"
echo "Welcome to the SOLA Ghana data migration"
echo "****************************************"
echo ""
echo "Database Connectivity"
echo "....................."

read -p "Server IP Address / Host name [localhost]:" DBHOSTNAME
read -p "Server Port [5432]:" DBPORT
read -p "Database name [sola]:" DBNAME
read -p "Database User [postgres]:" DBUSER
read -s -p "Database User Password:" DBPWD

if [[ -z "$DBPWD" ]]; then
     echo ""
     echo "ERROR: Database password must be provided"
     exit 1;
else
	export PGPASSWORD=$DBPWD
fi
if [[ -z "$DBHOSTNAME" ]]; then
	DBHOSTNAME="localhost"
fi
if [[ -z "$DBPORT" ]]; then
	DBPORT="5432"
fi
if [[ -z "$DBNAME" ]]; then
	DBNAME="sola"
fi
if [[ -z "$DBUSER" ]]; then
	DBUSER="postgres"
fi
echo ""
echo ""
echo "Checking Database Connectivity:"
psql -U $DBUSER -h $DBHOSTNAME -p $DBPORT -d $DBNAME --command="SELECT now(),'Database Connection OK' as \"Database\"" -t &> logs/connectivity.log
RSLT=`cat logs/connectivity.log`
if [[ "$RSLT" =~ "Connection OK" ]] 
then 
	echo "Database connection ... OK"
else
	echo "Database connection ... FAILED"
	echo "See "`pwd`"/logs/connectivity.log"
	exit 1
fi

echo ""
echo "Preparing Staging Area:"
psql -U $DBUSER -h $DBHOSTNAME -p $DBPORT -d $DBNAME -f "sql/staging_area.sql" &> logs/staging_area.log
RSLT=`cat logs/staging_area`
if [[ "$RSLT" =~ "ERROR:" ]] 
then 
	echo "Staging Area ... FAILED"
	echo "See "`pwd`"/logs/staging_area.log"
	exit 1
else
	echo "Staging Area ... OK"
fi
echo ""

#GET SRID TO BE USED FOR MIGRATION
read -p "SRID [2136]" SRID
if [[ -z "$SRID" ]]; then
	SRID="2136"
fi

#GET REGION TO BE USED FOR MIGRATION



#********************
#WORKING ON DISTRICT* 
#********************
echo ""
EXIT_LOOP=0
while [[ $EXIT_LOOP -eq 0 ]]
do
  read -p "Will you be migrating District Data? (Y/N)" ANSDIST
  case $ANSDIST in
    y|Y|Yes|yes|YES|n|N|No|no|NO)
      EXIT_LOOP=1
      ;;
    *)
      echo ""
      echo Invalid choice. Enter Yes or No
      EXIT_LOOP=0
      ;;
  esac 
done
echo

if [[ "$ANSDIST" =~ "Y" || "$ANSDIST" =~ "y" ]] 
then 
	read -p "Location of District Source files ["`pwd`"/data/source/districts]:" DISTSRCDIR
	if [[ -z "$DISTSRCDIR" ]]; then
		DISTSRCDIR=`pwd`"/data/source/districts"
		DISTDESTDIR=`pwd`"/data/destination/districts"
	fi

        #Asking user for 
	#read -p "Location of District Destination files ["`pwd`"/data/destination/districts]:" DISTDESTDIR
	#if [[ -z "$DISTDESTDIR" ]]; then
	#	DISTDESTDIR=`pwd`"/data/destination/districts"
	#fi

	## PROCESS EACH DISTRICT FILE
	for FILE in $( ls $DISTSRCDIR|grep -i .zip$)
	do
	   echo "Processing District File ... "$FILE
	   DISTNO="${FILE%.*}"
	   rm -rf $DISTDESTDIR/$DISTNO &> logs/districts.log
	   mkdir -p $DISTDESTDIR/$DISTNO &>> logs/districts.log
	   unzip  $DISTSRCDIR/$FILE  -d $DISTDESTDIR &>> logs/districts.log
	   SHPFILE=`ls $DISTDESTDIR/$DISTNO|grep -i .shp$`
	   shp2pgsql -a -s $SRID -g the_geom $DISTDESTDIR/$DISTNO/$SHPFILE staging_area.district|grep -i INSERT &> "$DISTDESTDIR/$DISTNO/district_data.sql"
	   psql -U $DBUSER -h $DBHOSTNAME -p $DBPORT -d $DBNAME -f "$DISTDESTDIR/$DISTNO/district_data.sql" &>> logs/districts.log
	   echo ""
	done
fi 




#********************
#WORKING ON SECTION* 
#********************
EXIT_LOOP=0
while [[ $EXIT_LOOP -eq 0 ]]
do
  read -p "Will you be migrating Section Data (Y/N)" ANSSEC
  case $ANSSEC in
    y|Y|Yes|yes|YES|n|N|No|no|NO)
      EXIT_LOOP=1
      ;;
    *)
      echo ""
      echo Invalid choice. Enter Yes or No
      EXIT_LOOP=0
      ;;
  esac 
done
echo
if [[ "$ANSSEC" =~ "Y" || "$ANSSEC" =~ "y" ]] 
then 
	read -p "Location of Section Source files ["`pwd`"/data/source/sections]:" SECSRCDIR
	if [[ -z "$SECSRCDIR" ]]; then
		SECSRCDIR=`pwd`"/data/source/sections"
		SECDESTDIR=`pwd`"/data/destination/sections"
	fi

	echo ""
	EXIT_LOOP=0
	while [[ $EXIT_LOOP -eq 0 ]]
	do
	  echo "Select a Region No for Section"
	  echo "1. Greater Accra"
	  echo "2. Ashanti"
	  echo "3. Brong Ahafo"
	  echo "4. Central"
	  echo "5. Eastern"
	  echo "6. Northern"
	  echo "7. Volta"
	  echo "8. Upper East"
	  echo "9. Upper West"
	  echo "10. Western"
	  read -p "Enter Choice [1-10]" ANSREG
	  case $ANSREG in
	    1)
	      ANSREG='GA'
	      EXIT_LOOP=1
	      ;;
	    2)
	      ANSREG='AS'
	      EXIT_LOOP=1
	      ;;
	    3)
	      ANSREG='BA'
	      EXIT_LOOP=1
	      ;;
	    4)
	      ANSREG='CR'
	      EXIT_LOOP=1
	      ;;
	    5)
	      ANSREG='ER'
	      EXIT_LOOP=1
	      ;;
	    6)
	      ANSREG='NR'
	      EXIT_LOOP=1
	      ;;
	    7)
	      ANSREG='VR'
	      EXIT_LOOP=1
	      ;;
	    8)
	      ANSREG='UE'
	      EXIT_LOOP=1
	      ;;
	    9)
	      ANSREG='UW'
	      EXIT_LOOP=1
	      ;;
	    10)
	      ANSREG='WR'
	      EXIT_LOOP=1
	      ;;
	    *)
	      echo ""
	      echo Invalid choice.
	      EXIT_LOOP=0
	      ;;
	  esac 
	done
	echo
else
	echo "Migration ended"
        exit 1
fi 


## PROCESS EACH SECTION FILE
for FILE in $( ls $SECSRCDIR|grep -i .zip$)
do
   echo "Processing Sections File ... "$FILE
   SECNO="${FILE%.*}"
   rm -rf $SECDESTDIR/$SECNO &>> logs/sections.log
   mkdir -p $SECDESTDIR/$SECNO &>> logs/sections.log
   unzip  $SECSRCDIR/$SECNO.ZIP  -d $SECDESTDIR/$SECNO &>> logs/sections.log
   avcimport $SECDESTDIR/$SECNO/LOT.E00 $SECDESTDIR/$SECNO/cov_lot &>> logs/sections.log
   avcimport $SECDESTDIR/$SECNO/BLOCK.E00 $SECDESTDIR/$SECNO/cov_block &>> logs/sections.log
   ogr2ogr -f "ESRI Shapefile" -skipfailures  $SECDESTDIR/$SECNO/shape_lot $SECDESTDIR/$SECNO/cov_lot &>> logs/sections.log
   ogr2ogr -f "ESRI Shapefile" -skipfailures  $SECDESTDIR/$SECNO/shape_block $SECDESTDIR/$SECNO/cov_block &>> logs/sections.log
   shp2pgsql -a -s $SRID -g geom $SECDESTDIR/$SECNO/shape_block/PAL staging_area.shape_block|grep -i INSERT &>  "$SECDESTDIR/$SECNO/block_data.sql"
   psql -U $DBUSER -h $DBHOSTNAME -p $DBPORT -d $DBNAME -f "$SECDESTDIR/$SECNO/block_data.sql" &>> logs/sections.log
   psql -U $DBUSER -h $DBHOSTNAME -p $DBPORT -d $DBNAME --command="update staging_area.shape_block set section='$SECNO', region='$ANSREG' where section is null" &>> logs/sections.log
   shp2pgsql -a -s $SRID -g geom $SECDESTDIR/$SECNO/shape_lot/PAL staging_area.shape_lot| grep -i INSERT &>"$SECDESTDIR/$SECNO/lot_data.sql"
   psql -U $DBUSER -h $DBHOSTNAME -p $DBPORT -d $DBNAME -f "$SECDESTDIR/$SECNO/lot_data.sql" &>> logs/sections.log
   echo ""
done

##
if [[ "$ANSSEC" =~ "Y" || "$ANSSEC" =~ "y" ]] || [[ "$ANSDIST" =~ "Y" || "$ANSDIST" =~ "y" ]]; then
	psql -U $DBUSER -h $DBHOSTNAME -p $DBPORT -d $DBNAME -f "sql/migrate_cadastre.sql" &> logs/cadastre_migration.log
fi

echo "Migration ended"
exit 0





